'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var queue = [];
function getContext() {
    var pages = getCurrentPages();
    return pages[pages.length - 1];
}
var Dialog = function Dialog(options) {
    options = Object.assign(Object.assign({}, Dialog.currentOptions), options);
    return new Promise(function (resolve, reject) {
        var context = options.context || getContext();
        var dialog = context.selectComponent(options.selector);
        delete options.context;
        delete options.selector;
        if (dialog) {
            dialog.setData(Object.assign({ onCancel: reject, onConfirm: resolve }, options));
            queue.push(dialog);
        } else {
            console.warn('未找到 van-dialog 节点，请确认 selector 及 context 是否正确');
        }
    });
};
Dialog.defaultOptions = {
    show: true,
    title: '',
    width: null,
    message: '',
    zIndex: 100,
    overlay: true,
    selector: '#van-dialog',
    className: '',
    asyncClose: false,
    transition: 'scale',
    customStyle: '',
    messageAlign: '',
    overlayStyle: '',
    confirmButtonText: '确认',
    cancelButtonText: '取消',
    showConfirmButton: true,
    showCancelButton: false,
    closeOnClickOverlay: false,
    confirmButtonOpenType: ''
};
Dialog.alert = Dialog;
Dialog.confirm = function (options) {
    return Dialog(Object.assign({ showCancelButton: true }, options));
};
Dialog.close = function () {
    queue.forEach(function (dialog) {
        dialog.close();
    });
    queue = [];
};
Dialog.stopLoading = function () {
    queue.forEach(function (dialog) {
        dialog.stopLoading();
    });
};
Dialog.setDefaultOptions = function (options) {
    Object.assign(Dialog.currentOptions, options);
};
Dialog.resetDefaultOptions = function () {
    Dialog.currentOptions = Object.assign({}, Dialog.defaultOptions);
};
Dialog.resetDefaultOptions();
exports.default = Dialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpYWxvZy5qcyJdLCJuYW1lcyI6WyJxdWV1ZSIsImdldENvbnRleHQiLCJwYWdlcyIsImdldEN1cnJlbnRQYWdlcyIsImxlbmd0aCIsIkRpYWxvZyIsIm9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJjdXJyZW50T3B0aW9ucyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29udGV4dCIsImRpYWxvZyIsInNlbGVjdENvbXBvbmVudCIsInNlbGVjdG9yIiwic2V0RGF0YSIsIm9uQ2FuY2VsIiwib25Db25maXJtIiwicHVzaCIsImNvbnNvbGUiLCJ3YXJuIiwiZGVmYXVsdE9wdGlvbnMiLCJzaG93IiwidGl0bGUiLCJ3aWR0aCIsIm1lc3NhZ2UiLCJ6SW5kZXgiLCJvdmVybGF5IiwiY2xhc3NOYW1lIiwiYXN5bmNDbG9zZSIsInRyYW5zaXRpb24iLCJjdXN0b21TdHlsZSIsIm1lc3NhZ2VBbGlnbiIsIm92ZXJsYXlTdHlsZSIsImNvbmZpcm1CdXR0b25UZXh0IiwiY2FuY2VsQnV0dG9uVGV4dCIsInNob3dDb25maXJtQnV0dG9uIiwic2hvd0NhbmNlbEJ1dHRvbiIsImNsb3NlT25DbGlja092ZXJsYXkiLCJjb25maXJtQnV0dG9uT3BlblR5cGUiLCJhbGVydCIsImNvbmZpcm0iLCJjbG9zZSIsImZvckVhY2giLCJzdG9wTG9hZGluZyIsInNldERlZmF1bHRPcHRpb25zIiwicmVzZXREZWZhdWx0T3B0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxRQUFRLEVBQVo7QUFDQSxTQUFTQyxVQUFULEdBQXNCO0FBQ2xCLFFBQU1DLFFBQVFDLGlCQUFkO0FBQ0EsV0FBT0QsTUFBTUEsTUFBTUUsTUFBTixHQUFlLENBQXJCLENBQVA7QUFDSDtBQUNELElBQU1DLFNBQVMsU0FBVEEsTUFBUyxVQUFXO0FBQ3RCQyxjQUFVQyxPQUFPQyxNQUFQLENBQWNELE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCSCxPQUFPSSxjQUF6QixDQUFkLEVBQXdESCxPQUF4RCxDQUFWO0FBQ0EsV0FBTyxJQUFJSSxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3BDLFlBQU1DLFVBQVVQLFFBQVFPLE9BQVIsSUFBbUJaLFlBQW5DO0FBQ0EsWUFBTWEsU0FBU0QsUUFBUUUsZUFBUixDQUF3QlQsUUFBUVUsUUFBaEMsQ0FBZjtBQUNBLGVBQU9WLFFBQVFPLE9BQWY7QUFDQSxlQUFPUCxRQUFRVSxRQUFmO0FBQ0EsWUFBSUYsTUFBSixFQUFZO0FBQ1JBLG1CQUFPRyxPQUFQLENBQWVWLE9BQU9DLE1BQVAsQ0FBYyxFQUFFVSxVQUFVTixNQUFaLEVBQW9CTyxXQUFXUixPQUEvQixFQUFkLEVBQXdETCxPQUF4RCxDQUFmO0FBQ0FOLGtCQUFNb0IsSUFBTixDQUFXTixNQUFYO0FBQ0gsU0FIRCxNQUlLO0FBQ0RPLG9CQUFRQyxJQUFSLENBQWEsK0NBQWI7QUFDSDtBQUNKLEtBWk0sQ0FBUDtBQWFILENBZkQ7QUFnQkFqQixPQUFPa0IsY0FBUCxHQUF3QjtBQUNwQkMsVUFBTSxJQURjO0FBRXBCQyxXQUFPLEVBRmE7QUFHcEJDLFdBQU8sSUFIYTtBQUlwQkMsYUFBUyxFQUpXO0FBS3BCQyxZQUFRLEdBTFk7QUFNcEJDLGFBQVMsSUFOVztBQU9wQmIsY0FBVSxhQVBVO0FBUXBCYyxlQUFXLEVBUlM7QUFTcEJDLGdCQUFZLEtBVFE7QUFVcEJDLGdCQUFZLE9BVlE7QUFXcEJDLGlCQUFhLEVBWE87QUFZcEJDLGtCQUFjLEVBWk07QUFhcEJDLGtCQUFjLEVBYk07QUFjcEJDLHVCQUFtQixJQWRDO0FBZXBCQyxzQkFBa0IsSUFmRTtBQWdCcEJDLHVCQUFtQixJQWhCQztBQWlCcEJDLHNCQUFrQixLQWpCRTtBQWtCcEJDLHlCQUFxQixLQWxCRDtBQW1CcEJDLDJCQUF1QjtBQW5CSCxDQUF4QjtBQXFCQXBDLE9BQU9xQyxLQUFQLEdBQWVyQyxNQUFmO0FBQ0FBLE9BQU9zQyxPQUFQLEdBQWlCO0FBQUEsV0FBV3RDLE9BQU9FLE9BQU9DLE1BQVAsQ0FBYyxFQUFFK0Isa0JBQWtCLElBQXBCLEVBQWQsRUFBMENqQyxPQUExQyxDQUFQLENBQVg7QUFBQSxDQUFqQjtBQUNBRCxPQUFPdUMsS0FBUCxHQUFlLFlBQU07QUFDakI1QyxVQUFNNkMsT0FBTixDQUFjLGtCQUFVO0FBQ3BCL0IsZUFBTzhCLEtBQVA7QUFDSCxLQUZEO0FBR0E1QyxZQUFRLEVBQVI7QUFDSCxDQUxEO0FBTUFLLE9BQU95QyxXQUFQLEdBQXFCLFlBQU07QUFDdkI5QyxVQUFNNkMsT0FBTixDQUFjLGtCQUFVO0FBQ3BCL0IsZUFBT2dDLFdBQVA7QUFDSCxLQUZEO0FBR0gsQ0FKRDtBQUtBekMsT0FBTzBDLGlCQUFQLEdBQTJCLG1CQUFXO0FBQ2xDeEMsV0FBT0MsTUFBUCxDQUFjSCxPQUFPSSxjQUFyQixFQUFxQ0gsT0FBckM7QUFDSCxDQUZEO0FBR0FELE9BQU8yQyxtQkFBUCxHQUE2QixZQUFNO0FBQy9CM0MsV0FBT0ksY0FBUCxHQUF3QkYsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JILE9BQU9rQixjQUF6QixDQUF4QjtBQUNILENBRkQ7QUFHQWxCLE9BQU8yQyxtQkFBUDtrQkFDZTNDLE0iLCJmaWxlIjoiZGlhbG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IHF1ZXVlID0gW107XG5mdW5jdGlvbiBnZXRDb250ZXh0KCkge1xuICAgIGNvbnN0IHBhZ2VzID0gZ2V0Q3VycmVudFBhZ2VzKCk7XG4gICAgcmV0dXJuIHBhZ2VzW3BhZ2VzLmxlbmd0aCAtIDFdO1xufVxuY29uc3QgRGlhbG9nID0gb3B0aW9ucyA9PiB7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgRGlhbG9nLmN1cnJlbnRPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IG9wdGlvbnMuY29udGV4dCB8fCBnZXRDb250ZXh0KCk7XG4gICAgICAgIGNvbnN0IGRpYWxvZyA9IGNvbnRleHQuc2VsZWN0Q29tcG9uZW50KG9wdGlvbnMuc2VsZWN0b3IpO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5jb250ZXh0O1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5zZWxlY3RvcjtcbiAgICAgICAgaWYgKGRpYWxvZykge1xuICAgICAgICAgICAgZGlhbG9nLnNldERhdGEoT2JqZWN0LmFzc2lnbih7IG9uQ2FuY2VsOiByZWplY3QsIG9uQ29uZmlybTogcmVzb2x2ZSB9LCBvcHRpb25zKSk7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGRpYWxvZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ+acquaJvuWIsCB2YW4tZGlhbG9nIOiKgueCue+8jOivt+ehruiupCBzZWxlY3RvciDlj4ogY29udGV4dCDmmK/lkKbmraPnoa4nKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbkRpYWxvZy5kZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBzaG93OiB0cnVlLFxuICAgIHRpdGxlOiAnJyxcbiAgICB3aWR0aDogbnVsbCxcbiAgICBtZXNzYWdlOiAnJyxcbiAgICB6SW5kZXg6IDEwMCxcbiAgICBvdmVybGF5OiB0cnVlLFxuICAgIHNlbGVjdG9yOiAnI3Zhbi1kaWFsb2cnLFxuICAgIGNsYXNzTmFtZTogJycsXG4gICAgYXN5bmNDbG9zZTogZmFsc2UsXG4gICAgdHJhbnNpdGlvbjogJ3NjYWxlJyxcbiAgICBjdXN0b21TdHlsZTogJycsXG4gICAgbWVzc2FnZUFsaWduOiAnJyxcbiAgICBvdmVybGF5U3R5bGU6ICcnLFxuICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn56Gu6K6kJyxcbiAgICBjYW5jZWxCdXR0b25UZXh0OiAn5Y+W5raIJyxcbiAgICBzaG93Q29uZmlybUJ1dHRvbjogdHJ1ZSxcbiAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSxcbiAgICBjbG9zZU9uQ2xpY2tPdmVybGF5OiBmYWxzZSxcbiAgICBjb25maXJtQnV0dG9uT3BlblR5cGU6ICcnXG59O1xuRGlhbG9nLmFsZXJ0ID0gRGlhbG9nO1xuRGlhbG9nLmNvbmZpcm0gPSBvcHRpb25zID0+IERpYWxvZyhPYmplY3QuYXNzaWduKHsgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSB9LCBvcHRpb25zKSk7XG5EaWFsb2cuY2xvc2UgPSAoKSA9PiB7XG4gICAgcXVldWUuZm9yRWFjaChkaWFsb2cgPT4ge1xuICAgICAgICBkaWFsb2cuY2xvc2UoKTtcbiAgICB9KTtcbiAgICBxdWV1ZSA9IFtdO1xufTtcbkRpYWxvZy5zdG9wTG9hZGluZyA9ICgpID0+IHtcbiAgICBxdWV1ZS5mb3JFYWNoKGRpYWxvZyA9PiB7XG4gICAgICAgIGRpYWxvZy5zdG9wTG9hZGluZygpO1xuICAgIH0pO1xufTtcbkRpYWxvZy5zZXREZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnMgPT4ge1xuICAgIE9iamVjdC5hc3NpZ24oRGlhbG9nLmN1cnJlbnRPcHRpb25zLCBvcHRpb25zKTtcbn07XG5EaWFsb2cucmVzZXREZWZhdWx0T3B0aW9ucyA9ICgpID0+IHtcbiAgICBEaWFsb2cuY3VycmVudE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBEaWFsb2cuZGVmYXVsdE9wdGlvbnMpO1xufTtcbkRpYWxvZy5yZXNldERlZmF1bHRPcHRpb25zKCk7XG5leHBvcnQgZGVmYXVsdCBEaWFsb2c7XG4iXX0=