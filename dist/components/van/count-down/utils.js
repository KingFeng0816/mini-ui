'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseTimeData = parseTimeData;
exports.parseFormat = parseFormat;
exports.isSameSecond = isSameSecond;
function padZero(num) {
    var targetLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

    var str = num + '';
    while (str.length < targetLength) {
        str = '0' + str;
    }
    return str;
}
var SECOND = 1000;
var MINUTE = 60 * SECOND;
var HOUR = 60 * MINUTE;
var DAY = 24 * HOUR;
function parseTimeData(time) {
    var days = Math.floor(time / DAY);
    var hours = Math.floor(time % DAY / HOUR);
    var minutes = Math.floor(time % HOUR / MINUTE);
    var seconds = Math.floor(time % MINUTE / SECOND);
    var milliseconds = Math.floor(time % SECOND);
    return {
        days: days,
        hours: hours,
        minutes: minutes,
        seconds: seconds,
        milliseconds: milliseconds
    };
}
function parseFormat(format, timeData) {
    var days = timeData.days;
    var hours = timeData.hours,
        minutes = timeData.minutes,
        seconds = timeData.seconds,
        milliseconds = timeData.milliseconds;

    if (format.indexOf('DD') === -1) {
        hours += days * 24;
    } else {
        format = format.replace('DD', padZero(days));
    }
    if (format.indexOf('HH') === -1) {
        minutes += hours * 60;
    } else {
        format = format.replace('HH', padZero(hours));
    }
    if (format.indexOf('mm') === -1) {
        seconds += minutes * 60;
    } else {
        format = format.replace('mm', padZero(minutes));
    }
    if (format.indexOf('ss') === -1) {
        milliseconds += seconds * 1000;
    } else {
        format = format.replace('ss', padZero(seconds));
    }
    return format.replace('SSS', padZero(milliseconds, 3));
}
function isSameSecond(time1, time2) {
    return Math.floor(time1 / 1000) === Math.floor(time2 / 1000);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sIm5hbWVzIjpbInBhcnNlVGltZURhdGEiLCJwYXJzZUZvcm1hdCIsImlzU2FtZVNlY29uZCIsInBhZFplcm8iLCJudW0iLCJ0YXJnZXRMZW5ndGgiLCJzdHIiLCJsZW5ndGgiLCJTRUNPTkQiLCJNSU5VVEUiLCJIT1VSIiwiREFZIiwidGltZSIsImRheXMiLCJNYXRoIiwiZmxvb3IiLCJob3VycyIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwiZm9ybWF0IiwidGltZURhdGEiLCJpbmRleE9mIiwicmVwbGFjZSIsInRpbWUxIiwidGltZTIiXSwibWFwcGluZ3MiOiI7Ozs7O1FBV2dCQSxhLEdBQUFBLGE7UUFjQUMsVyxHQUFBQSxXO1FBNkJBQyxZLEdBQUFBLFk7QUF0RGhCLFNBQVNDLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQXdDO0FBQUEsUUFBbEJDLFlBQWtCLHVFQUFILENBQUc7O0FBQ3BDLFFBQUlDLE1BQU1GLE1BQU0sRUFBaEI7QUFDQSxXQUFPRSxJQUFJQyxNQUFKLEdBQWFGLFlBQXBCLEVBQWtDO0FBQzlCQyxjQUFNLE1BQU1BLEdBQVo7QUFDSDtBQUNELFdBQU9BLEdBQVA7QUFDSDtBQUNELElBQU1FLFNBQVMsSUFBZjtBQUNBLElBQU1DLFNBQVMsS0FBS0QsTUFBcEI7QUFDQSxJQUFNRSxPQUFPLEtBQUtELE1BQWxCO0FBQ0EsSUFBTUUsTUFBTSxLQUFLRCxJQUFqQjtBQUNPLFNBQVNWLGFBQVQsQ0FBdUJZLElBQXZCLEVBQTZCO0FBQ2hDLFFBQU1DLE9BQU9DLEtBQUtDLEtBQUwsQ0FBV0gsT0FBT0QsR0FBbEIsQ0FBYjtBQUNBLFFBQU1LLFFBQVFGLEtBQUtDLEtBQUwsQ0FBWUgsT0FBT0QsR0FBUixHQUFlRCxJQUExQixDQUFkO0FBQ0EsUUFBTU8sVUFBVUgsS0FBS0MsS0FBTCxDQUFZSCxPQUFPRixJQUFSLEdBQWdCRCxNQUEzQixDQUFoQjtBQUNBLFFBQU1TLFVBQVVKLEtBQUtDLEtBQUwsQ0FBWUgsT0FBT0gsTUFBUixHQUFrQkQsTUFBN0IsQ0FBaEI7QUFDQSxRQUFNVyxlQUFlTCxLQUFLQyxLQUFMLENBQVdILE9BQU9KLE1BQWxCLENBQXJCO0FBQ0EsV0FBTztBQUNISyxrQkFERztBQUVIRyxvQkFGRztBQUdIQyx3QkFIRztBQUlIQyx3QkFKRztBQUtIQztBQUxHLEtBQVA7QUFPSDtBQUNNLFNBQVNsQixXQUFULENBQXFCbUIsTUFBckIsRUFBNkJDLFFBQTdCLEVBQXVDO0FBQUEsUUFDbENSLElBRGtDLEdBQ3pCUSxRQUR5QixDQUNsQ1IsSUFEa0M7QUFBQSxRQUVwQ0csS0FGb0MsR0FFTUssUUFGTixDQUVwQ0wsS0FGb0M7QUFBQSxRQUU3QkMsT0FGNkIsR0FFTUksUUFGTixDQUU3QkosT0FGNkI7QUFBQSxRQUVwQkMsT0FGb0IsR0FFTUcsUUFGTixDQUVwQkgsT0FGb0I7QUFBQSxRQUVYQyxZQUZXLEdBRU1FLFFBRk4sQ0FFWEYsWUFGVzs7QUFHMUMsUUFBSUMsT0FBT0UsT0FBUCxDQUFlLElBQWYsTUFBeUIsQ0FBQyxDQUE5QixFQUFpQztBQUM3Qk4saUJBQVNILE9BQU8sRUFBaEI7QUFDSCxLQUZELE1BR0s7QUFDRE8saUJBQVNBLE9BQU9HLE9BQVAsQ0FBZSxJQUFmLEVBQXFCcEIsUUFBUVUsSUFBUixDQUFyQixDQUFUO0FBQ0g7QUFDRCxRQUFJTyxPQUFPRSxPQUFQLENBQWUsSUFBZixNQUF5QixDQUFDLENBQTlCLEVBQWlDO0FBQzdCTCxtQkFBV0QsUUFBUSxFQUFuQjtBQUNILEtBRkQsTUFHSztBQUNESSxpQkFBU0EsT0FBT0csT0FBUCxDQUFlLElBQWYsRUFBcUJwQixRQUFRYSxLQUFSLENBQXJCLENBQVQ7QUFDSDtBQUNELFFBQUlJLE9BQU9FLE9BQVAsQ0FBZSxJQUFmLE1BQXlCLENBQUMsQ0FBOUIsRUFBaUM7QUFDN0JKLG1CQUFXRCxVQUFVLEVBQXJCO0FBQ0gsS0FGRCxNQUdLO0FBQ0RHLGlCQUFTQSxPQUFPRyxPQUFQLENBQWUsSUFBZixFQUFxQnBCLFFBQVFjLE9BQVIsQ0FBckIsQ0FBVDtBQUNIO0FBQ0QsUUFBSUcsT0FBT0UsT0FBUCxDQUFlLElBQWYsTUFBeUIsQ0FBQyxDQUE5QixFQUFpQztBQUM3Qkgsd0JBQWdCRCxVQUFVLElBQTFCO0FBQ0gsS0FGRCxNQUdLO0FBQ0RFLGlCQUFTQSxPQUFPRyxPQUFQLENBQWUsSUFBZixFQUFxQnBCLFFBQVFlLE9BQVIsQ0FBckIsQ0FBVDtBQUNIO0FBQ0QsV0FBT0UsT0FBT0csT0FBUCxDQUFlLEtBQWYsRUFBc0JwQixRQUFRZ0IsWUFBUixFQUFzQixDQUF0QixDQUF0QixDQUFQO0FBQ0g7QUFDTSxTQUFTakIsWUFBVCxDQUFzQnNCLEtBQXRCLEVBQTZCQyxLQUE3QixFQUFvQztBQUN2QyxXQUFPWCxLQUFLQyxLQUFMLENBQVdTLFFBQVEsSUFBbkIsTUFBNkJWLEtBQUtDLEtBQUwsQ0FBV1UsUUFBUSxJQUFuQixDQUFwQztBQUNIIiwiZmlsZSI6InV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gcGFkWmVybyhudW0sIHRhcmdldExlbmd0aCA9IDIpIHtcbiAgICBsZXQgc3RyID0gbnVtICsgJyc7XG4gICAgd2hpbGUgKHN0ci5sZW5ndGggPCB0YXJnZXRMZW5ndGgpIHtcbiAgICAgICAgc3RyID0gJzAnICsgc3RyO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuY29uc3QgU0VDT05EID0gMTAwMDtcbmNvbnN0IE1JTlVURSA9IDYwICogU0VDT05EO1xuY29uc3QgSE9VUiA9IDYwICogTUlOVVRFO1xuY29uc3QgREFZID0gMjQgKiBIT1VSO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGltZURhdGEodGltZSkge1xuICAgIGNvbnN0IGRheXMgPSBNYXRoLmZsb29yKHRpbWUgLyBEQVkpO1xuICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcigodGltZSAlIERBWSkgLyBIT1VSKTtcbiAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcigodGltZSAlIEhPVVIpIC8gTUlOVVRFKTtcbiAgICBjb25zdCBzZWNvbmRzID0gTWF0aC5mbG9vcigodGltZSAlIE1JTlVURSkgLyBTRUNPTkQpO1xuICAgIGNvbnN0IG1pbGxpc2Vjb25kcyA9IE1hdGguZmxvb3IodGltZSAlIFNFQ09ORCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF5cyxcbiAgICAgICAgaG91cnMsXG4gICAgICAgIG1pbnV0ZXMsXG4gICAgICAgIHNlY29uZHMsXG4gICAgICAgIG1pbGxpc2Vjb25kc1xuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VGb3JtYXQoZm9ybWF0LCB0aW1lRGF0YSkge1xuICAgIGNvbnN0IHsgZGF5cyB9ID0gdGltZURhdGE7XG4gICAgbGV0IHsgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG1pbGxpc2Vjb25kcyB9ID0gdGltZURhdGE7XG4gICAgaWYgKGZvcm1hdC5pbmRleE9mKCdERCcpID09PSAtMSkge1xuICAgICAgICBob3VycyArPSBkYXlzICogMjQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgnREQnLCBwYWRaZXJvKGRheXMpKTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdC5pbmRleE9mKCdISCcpID09PSAtMSkge1xuICAgICAgICBtaW51dGVzICs9IGhvdXJzICogNjA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgnSEgnLCBwYWRaZXJvKGhvdXJzKSk7XG4gICAgfVxuICAgIGlmIChmb3JtYXQuaW5kZXhPZignbW0nKSA9PT0gLTEpIHtcbiAgICAgICAgc2Vjb25kcyArPSBtaW51dGVzICogNjA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgnbW0nLCBwYWRaZXJvKG1pbnV0ZXMpKTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdC5pbmRleE9mKCdzcycpID09PSAtMSkge1xuICAgICAgICBtaWxsaXNlY29uZHMgKz0gc2Vjb25kcyAqIDEwMDA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgnc3MnLCBwYWRaZXJvKHNlY29uZHMpKTtcbiAgICB9XG4gICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKCdTU1MnLCBwYWRaZXJvKG1pbGxpc2Vjb25kcywgMykpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2FtZVNlY29uZCh0aW1lMSwgdGltZTIpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcih0aW1lMSAvIDEwMDApID09PSBNYXRoLmZsb29yKHRpbWUyIC8gMTAwMCk7XG59XG4iXX0=